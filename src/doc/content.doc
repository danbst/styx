== Content

=== Pages

Pages are the most basic content units. Every content in Styx is a page (posts and drafts are a special types of pages).

A page in Styx is an attribute set following a set of rules:

- It must define at least the `href`, `title`, `layout` and the `template` keys.
- The `template` key is a function that take the `page` attribute set as a parameter and return the page attribute set augmented with a `content` key representing the result of the template.
- The `layout` key is a function take a page attribute set with a `content` key, returned by the the `template` key, and render the final page source.
- The `href` key is the path of the generated page relative to site root.

It is possible to extend a page attribute set at will for more complex use cases.

[source, nix]
.Page definition example
----
  pages.about = {
    href = "about.html";
    template = templates.about;
    title = "About";
    layout = templates.layout;
  };
----

NOTE: The layout being common to most of the pages, the default layout is usually set with a map function when the page attribute set is converted to a list of pages.

[source, nix]
.Extending a page attribute set
----
  pages.about // { breadcrumbs = [ pages.index ]; }
----

Page content can be directly set in the template, or imported from an external file with the `parsePage` function:

[source, nix]
.Loading a markdown file
----
  about = {
    href = "about.html";
    template = templates.about;
    breadcrumbs = [ index ];
  } // (parsePage { dir = conf.pagesDir; file = "about.md"; });
----

NOTE: `parsePage` return a set with `title` and `content`, the converted HTML source of the page.

=== Posts

Posts are a special type of pages that defines some extra attributes.

By default, Styx read files in markdown format from `conf.postsDir`, but it is possible to specify a custom directory to the `getPosts` function.

Post files should follow the `YYYY-MM-DD-TITLE.md` convention to be loaded. During build, Styx with display a message if it cannot load a post file.

Post attribute sets generated by the `parsePost` function have the following attributes:

- `title`: Post title
- `content`: Post content in HTML format.
- `href`: Relative URL to the post.
- `timestamp`: Timestamp of the post in the `YYYY-MM-DD-TITLE` format.
- `id`: Name part of the post file name.

NOTE: The `getPosts` function does not set `template` and `layout` keys. So posts generated by it are imcomplete pages, but these keys can be set afterwards.

=== Drafts

Drafts are a special type of posts that are generated when the `--drafts` flag is passed to the Styx command.

By default, Styx read files in markdown format from `conf.draftsDir`, but it is possible to specify a custom directory to the `getDrafts` function.

Drafts attribute sets generated by the `parseDraft` function have the following attributes:

- `title`: Post title
- `content`: Post content in HTML format.
- `href`: Relative URL to the post.
- `timestamp`: Timestamp of the post in the `YYYY-MM-DD-TITLE` format.
- `id`: Name part of the post file name.
- `isDraft`: set to `true`.

NOTE: The only difference between posts and drafts is the presence of the `isDraft` attribute.

=== Substitutions

Subtitutions are a way to use some variables of `site.nix` in markdown files.

Substitutions are a set that must be passed to the `getPosts`,  `getDrafts` or `parsePage` arguments.

[source, nix]
.Setting substitutions in `default.nix`
----
  posts = let
    substitutions = { inherit conf; }; # <1>
    posts = getPosts { inherit substitutions; from = conf.postsDir; to = "posts"; }; # <2>
    drafts = optionals renderDrafts (getDrafts { inherit substitutions; from = conf.draftsDir; to = "drafts"; }); # <3>
    preparePosts = p: p // { template = templates.post.full; breadcrumbs = with pages; [ index (head archives) ]; };
  in sortPosts (map preparePosts (posts ++ drafts));
----

<1> Creating a subtitution set containing `conf`. `{ inherit conf; }` is a shorthand for `{ conf = conf; }`.
<2> Pass the substitutions to `getPosts` argument set.
<3> Pass the substitutions to `getDrafts` argument set.

In the markdown file, substitutions are used by surround it by `@`.

NOTE: It is impossible to use any nix expression in the substitution.

[source, nix]
.Using a substitution in a markdown file
----
  Learn more in the [Styx 0.1.0 Documentation](@conf.siteUrl@/documentation-v0-1-0.html). # <1>
----

<1> As `conf` is in the substitution set, it is possible to access any of its values by surrounding it by `@`.

=== Metadata

It is possible to set metadata to markdown files that will be merged to the page attribute set.
File metadata must a valid nix set between `{---` and `---}`.

[source, markdown]
.Adding metadata to a markdown file
----
{---
{
  title = "Hello World!";
}
---}

Lorem ipsum ...
----

